<!DOCTYPE html>
<html lang="pt">
  <head>
    <title>Template</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <!-- Metadados  -->
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <% # Dependências CSS %>
    <%= stylesheet_link_tag "/layout/assets/fonts/inter/inter.css",         "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "/layout/assets/icons/phosphor/styles.min.css", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "/layout/assets/css/all.min.css",               "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "/layout/assets/css/animate.min.css",           "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "landing_page",                                  "data-turbo-track": "reload" %>
    <% # App JS do projeto %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://unpkg.com/lucide-static@0.344.0/font/lucide.css" rel="stylesheet"/>
     <link rel="icon" href="favicon.ico" type="image/x-icon" />
    <!-- Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&family=Montserrat:wght@400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <!-- Fontes melhoradas para um visual mais suave e feminino -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="stylesheet"href="https://cdn.jsdelivr.net/npm/lucide@0.1.0/dist/lucide.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Quicksand:wght@300;400;500;600;700&family=Cormorant+Garamond:wght@300;400;500;600;700&family=Caveat:wght@400;500;600;700&display=swap"      rel="stylesheet"/>
  <!-- AOS Animation -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css"
    />
  </head>
  <body class="">
    <%= yield %>

<script>

document.addEventListener("DOMContentLoaded", function () {
  // Initialize AOS Animation
  AOS.init({
    duration: 800,
    easing: "ease-in-out",
    once: true,
  });

  // Mobile Menu Toggle
  const menuToggle = document.querySelector(".mobile-menu-toggle");
  const mobileMenu = document.querySelector(".mobile-menu");

  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener("click", function () {
      menuToggle.classList.toggle("active");
      mobileMenu.classList.toggle("active");
      document.body.classList.toggle("menu-open");

      if (menuToggle.classList.contains("active")) {
        menuToggle.querySelector("span:nth-child(1)").style.transform =
          "rotate(45deg) translate(5px, 5px)";
        menuToggle.querySelector("span:nth-child(2)").style.opacity = "0";
        menuToggle.querySelector("span:nth-child(3)").style.transform =
          "rotate(-45deg) translate(7px, -6px)";
      } else {
        menuToggle.querySelector("span:nth-child(1)").style.transform = "none";
        menuToggle.querySelector("span:nth-child(2)").style.opacity = "1";
        menuToggle.querySelector("span:nth-child(3)").style.transform = "none";
      }
    });

    // Close mobile menu when clicking on a link
    document.querySelectorAll(".mobile-nav-link").forEach((link) => {
      link.addEventListener("click", function () {
        menuToggle.classList.remove("active");
        mobileMenu.classList.remove("active");
        document.body.classList.remove("menu-open");

        menuToggle.querySelector("span:nth-child(1)").style.transform = "none";
        menuToggle.querySelector("span:nth-child(2)").style.opacity = "1";
        menuToggle.querySelector("span:nth-child(3)").style.transform = "none";
      });
    });
  }

  // Hero Slider
  const heroSlides = document.querySelectorAll(".hero-slide");
  let currentSlide = 0;

  function showSlide(index) {
    heroSlides.forEach((slide) => {
      slide.classList.remove("active");
    });

    heroSlides[index].classList.add("active");
  }

  function nextSlide() {
    currentSlide = (currentSlide + 1) % heroSlides.length;
    showSlide(currentSlide);
  }

  if (heroSlides.length > 1) {
    setInterval(nextSlide, 5000);
  }

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();

      const targetId = this.getAttribute("href");
      if (targetId === "#") return;

      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        const headerHeight =
          document.querySelector(".main-header").offsetHeight;
        const targetPosition =
          targetElement.getBoundingClientRect().top +
          window.pageYOffset -
          headerHeight;

        window.scrollTo({
          top: targetPosition,
          behavior: "smooth",
        });
      }
    });
  });

  // Add active class to nav items on scroll
  window.addEventListener("scroll", function () {
    const sections = document.querySelectorAll("section[id]");
    const scrollPosition = window.scrollY + 100;

    sections.forEach((section) => {
      const sectionTop = section.offsetTop - 100;
      const sectionHeight = section.offsetHeight;
      const sectionId = section.getAttribute("id");

      if (
        scrollPosition >= sectionTop &&
        scrollPosition < sectionTop + sectionHeight
      ) {
        document
          .querySelector('.nav-link[href="#' + sectionId + '"]')
          ?.classList.add("active");
      } else {
        document
          .querySelector('.nav-link[href="#' + sectionId + '"]')
          ?.classList.remove("active");
      }
    });
  });

  // Initialize Bootstrap tooltips
  const tooltipTriggerList = [].slice.call(
    document.querySelectorAll('[data-bs-toggle="tooltip"]')
  );
  if (typeof bootstrap !== "undefined") {
    tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }

  // Form validation
  const contactForm = document.querySelector(".contact-form");
  if (contactForm) {
    contactForm.addEventListener("submit", function (e) {
      e.preventDefault();

      // Simple validation
      let isValid = true;
      const name = document.getElementById("name");
      const email = document.getElementById("email");
      const message = document.getElementById("message");

      if (!name.value.trim()) {
        isValid = false;
        name.classList.add("is-invalid");
      } else {
        name.classList.remove("is-invalid");
      }

      if (!email.value.trim() || !isValidEmail(email.value)) {
        isValid = false;
        email.classList.add("is-invalid");
      } else {
        email.classList.remove("is-invalid");
      }

      if (!message.value.trim()) {
        isValid = false;
        message.classList.add("is-invalid");
      } else {
        message.classList.remove("is-invalid");
      }

      if (isValid) {
        // Here you would normally send the form data to a server
        // For demo purposes, we'll just show an alert
        alert("Mensagem enviada com sucesso! Entraremos em contato em breve.");
        contactForm.reset();
      }
    });
  }

  // Helper function to validate email
  function isValidEmail(email) {
    const re =
      /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
  }

  // Add animation to numbers
  const animateNumbers = () => {
    const numberElements = document.querySelectorAll(
      ".about-experience .years"
    );

    numberElements.forEach((element) => {
      const target = parseInt(element.textContent);
      let count = 0;
      const duration = 2000; // 2 seconds
      const increment = target / (duration / 30); // Update every 30ms

      const timer = setInterval(() => {
        count += increment;
        if (count >= target) {
          element.textContent = target;
          clearInterval(timer);
        } else {
          element.textContent = Math.floor(count);
        }
      }, 30);
    });
  };

  // Trigger number animation when element is in viewport
  const aboutExperience = document.querySelector(".about-experience");
  if (aboutExperience) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            animateNumbers();
            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.5 }
    );

    observer.observe(aboutExperience);
  }
});

// Add sticky header on scroll
window.addEventListener("scroll", function () {
  const header = document.querySelector(".main-header");
  if (header) {
    if (window.scrollY > 100) {
      header.classList.add("header-sticky");
    } else {
      header.classList.remove("header-sticky");
    }
  }
});

// Preloader
window.addEventListener("load", function () {
  const preloader = document.querySelector(".preloader");
  if (preloader) {
    preloader.classList.add("preloader-hide");

    setTimeout(function () {
      preloader.style.display = "none";
    }, 1000);
  }
});

// Counter Animation
document.addEventListener("DOMContentLoaded", function () {
  // Função para animar contadores
  function animateCounters() {
    const counters = document.querySelectorAll(".counter-number");
    const speed = 200; // Quanto menor, mais rápido

    counters.forEach((counter) => {
      const updateCount = () => {
        const target = parseInt(counter.getAttribute("data-count"));
        const count = parseInt(counter.innerText);
        const increment = Math.trunc(target / speed);

        if (count < target) {
          counter.innerText = count + increment;
          setTimeout(updateCount, 1);
        } else {
          counter.innerText = target;
        }
      };

      updateCount();
    });
  }

  // Função para verificar se elemento está visível na viewport
  function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <=
        (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }

  // Iniciar animação quando a seção estiver visível
  function checkCounters() {
    const counterSection = document.querySelector(".counter-item");
    if (counterSection && isElementInViewport(counterSection)) {
      animateCounters();
      window.removeEventListener("scroll", checkCounters);
    }
  }

  // Verificar ao carregar a página e ao rolar
  window.addEventListener("scroll", checkCounters);
  checkCounters();

  // Efeitos hover para os elementos da seção Sobre
  const featureItems = document.querySelectorAll(".about-feature-item");
  featureItems.forEach((item) => {
    item.addEventListener("mouseenter", function () {
      this.querySelector(".feature-icon").style.transform = "rotate(360deg)";
    });

    item.addEventListener("mouseleave", function () {
      this.querySelector(".feature-icon").style.transform = "rotate(0deg)";
    });
  });
});
</script>
   <!-- GSAP Animation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
  </body>
</html>